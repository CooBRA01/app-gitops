apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
  namespace: prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
      - name: flask
        image: evaander/your-app-flask:latest
        command: ["/bin/sh", "-c", "gunicorn --bind 0.0.0.0:6000 main:app"]
        ports:
        - containerPort: 6000
        env:
        - name: DATABASE_URL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@db:3306/main"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MYSQL_PASSWORD
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: RABBITMQ_URL
        - name: DEBUG
          value: "0"
        resources:
          limits:
            cpu: "300m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /api/products
            port: 6000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/products
            port: 6000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
      - name: queue
        image: evaander/your-app-flask:latest
        command: ["python", "-u", "consumer.py"]
        env:
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: RABBITMQ_URL
        resources:
          limits:
            cpu: "200m"
            memory: "512Mi"
          requests:
            cpu: "50m"
            memory: "128Mi"
        livenessProbe:
          exec:
            command: ["python", "-c", "import pika, os; pika.BlockingConnection(pika.URLParameters(os.getenv('RABBITMQ_URL')))"]
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: flask
  namespace: prod
spec:
  ports:
  - port: 6000
    targetPort: 6000
    nodePort: 30001
  selector:
    app: flask
  type: NodePort